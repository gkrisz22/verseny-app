// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Authentication schema
model User {
  id            String    @id @default(cuid())
  name          String?
  username      String?   @unique
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts      Account[]
  sessions      Session[]
  Authenticator Authenticator[]
  files         File[]
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String  @unique
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? @db.Text
  access_token             String? @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? @db.Text
  session_state            String?
  refresh_token_expires_in Int?
  user                     User?   @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}

model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

model Competition {
  id          String            @id @default(cuid())
  title       String
  description String            @db.Text
  startDate   DateTime
  endDate     DateTime?
  status      CompetitionStatus @default(UPCOMING)
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt

  categories Category[]
  typeId     String
  type       CompetitionType @relation(fields: [typeId], references: [id])
}

model Information {
  id          String   @id @default(cuid())
  title       String
  description String   @db.Text
  startDate   DateTime
  endDate     DateTime?
  status      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model CompetitionType {
  id        String   @id @default(cuid())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  competitions Competition[]
}

enum CompetitionStatus {
  UPCOMING
  ONGOING
  FINISHED
}

model Category {
  id          String   @id @default(cuid())
  name        String
  description String   @db.Text
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  competitionId String
  competition   Competition @relation(fields: [competitionId], references: [id], onDelete: Cascade)

  stages Stage[]
}

model Stage {
  id          String @id @default(cuid())
  name        String
  description String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  status    StageStatus @default(UPCOMING)
  startDate DateTime
  endDate   DateTime?

  categoryId String
  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  files      File[]
}

enum StageStatus {
  UPCOMING
  ONGOING
  FINISHED
}

model File {
  id         String   @id @default(cuid())
  name       String
  fsName     String   @unique
  path       String
  size       Int
  type       String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  user       User     @relation(fields: [uploadedBy], references: [id])
  uploadedBy String

  stage   Stage?  @relation(fields: [stageId], references: [id])
  stageId String?
}

model Role {
  id          String   @id @default(cuid())
  name        String
  description String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  permissions Permission[]
}

// can(user, 'action', 'resource')
model Permission {
  id          String   @id @default(cuid())
  role        Role     @relation(fields: [roleId], references: [id])
  roleId      String
  resource    String
  action      String
  description String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}
