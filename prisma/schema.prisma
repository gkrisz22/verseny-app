// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/**
 * ============================
 * ********* AuthJS **********
 * ============================
 */
model User {
  id            String    @id @default(cuid())
  name          String?
  username      String?   @unique
  email         String?   @unique
  emailVerified DateTime?
  password      String?
  image         String?
  superAdmin    Boolean   @default(false)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  status        UserStatus @default(PENDING)
  files         File[]

  memberships OrganizationUser[]
  accounts    Account[]
  verification VerificationToken?
  @@unique([email, username])
}

enum UserStatus {
  ACTIVE 
  INACTIVE
  PENDING
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  id_token          String?
  session_state     String?
  scope             String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([provider, providerAccountId])
}
 
model VerificationToken {
  identifier String @id @default(cuid()) 
  token      String 
  expires    DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId String @unique
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
}

model Organization {
  id           String             @id @default(cuid())
  name         String
  om           String?
  region       String             @default("Budapest")
  postalCode   String
  city         String
  address      String
  phoneNumber  String?
  contactEmail String?
  contactName  String?
  type         String             @default("SCHOOL")
  status       OrganizationStatus @default(PENDING)
  createdAt    DateTime           @default(now())
  updatedAt    DateTime           @updatedAt

  members OrganizationUser[]
  school  School?
}

enum OrganizationType {
  SCHOOL
  UNIVERSITY
  INDEPENDENT
}

enum OrganizationStatus {
  ACTIVE
  INACTIVE
  PENDING
  REJECTED
}

// Many-to-Many: Organization - User
model OrganizationUser {
  id             String             @id @default(cuid())
  organizationId String
  userId         String
  roles          OrganizationRole[]
  joinedAt       DateTime           @default(now())
  updatedAt      DateTime           @updatedAt
  organization   Organization       @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  user           User               @relation(fields: [userId], references: [id])

  @@unique([organizationId, userId])
}

// Many-to-Many: Role - OrganizationUser
model OrganizationRole {
  id                 String           @id @default(cuid())
  roleId             String
  assignedAt         DateTime         @default(now())
  updatedAt          DateTime         @updatedAt
  organizationUserId String
  organizationUser   OrganizationUser @relation(fields: [organizationUserId], references: [id])
  role               Role             @relation(fields: [roleId], references: [id])
}

model School {
  id             String       @id @default(cuid())
  name           String       @unique
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  students SchoolStudent[]
  @@unique([organizationId])
}

model Student {
  id             String       @id @default(cuid())
  name           String
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  schools SchoolStudent[]
}

model SchoolStudent {
  id          String    @id @default(cuid())
  studentId   String    @unique
  schoolId    String    @unique
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  student    Student   @relation(fields: [studentId], references: [id])
  school     School    @relation(fields: [schoolId], references: [id])
  @@unique([studentId, schoolId])
}

model Competition {
  id          String            @id @default(cuid())
  title       String
  description String            @db.Text
  startDate   DateTime
  endDate     DateTime?
  status      CompetitionStatus @default(UPCOMING)
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt

  categories Category[]
}


enum CompetitionStatus {
  UPCOMING
  ONGOING
  FINISHED
}

model Category {
  id            String   @id @default(cuid())
  name          String
  description   String   @db.Text
  competitionId String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  competition Competition @relation(fields: [competitionId], references: [id], onDelete: Cascade)
  stages      Stage[]
}

model Stage {
  id          String      @id @default(cuid())
  name        String
  description String
  status      StageStatus @default(UPCOMING)
  startDate   DateTime
  endDate     DateTime?
  categoryId  String
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  category Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  files    File[]
}

enum StageStatus {
  UPCOMING
  ONGOING
  FINISHED
}

model File {
  id         String   @id @default(cuid())
  name       String
  fsName     String   @unique
  path       String
  size       Int
  type       String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  user       User     @relation(fields: [uploadedBy], references: [id])
  uploadedBy String

  stage   Stage?  @relation(fields: [stageId], references: [id])
  stageId String?
}

model Role {
  id          String   @id @default(cuid())
  name        String   @unique
  description String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  permissions Permission[]
  assignments OrganizationRole[]
}

model Permission {
  id          String   @id @default(cuid())
  role        Role     @relation(fields: [roleId], references: [id])
  roleId      String
  resource    String
  action      String
  description String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}