// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


// Authentication schema
model User {
  id            String          @id @default(cuid())
  name          String?
  username      String?         @unique
  email         String?         @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  Authenticator Authenticator[]
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt


  evaluator Evaulator?
}
 
model Account {
  id                       String  @id @default(cuid())
  userId                   String  @unique
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? @db.Text
  access_token             String? @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? @db.Text
  session_state            String?
  refresh_token_expires_in Int?
  user                     User?   @relation(fields: [userId], references: [id])
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  @@unique([provider, providerAccountId])
  @@index([userId])
}
 
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id])
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  @@index([userId])
}
 
model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@unique([identifier, token])
}
 
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([userId, credentialID])
}

model Competition {
  id          String    @id @default(cuid())
  title       String 
  description String    @db.Text
  startDate   DateTime
  endDate     DateTime?
  status      CompetitionStatus @default(UPCOMING)
  categories  Category[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

enum CompetitionStatus {
  UPCOMING
  ONGOING
  FINISHED
}

model Category {
  id          String    @id @default(cuid())
  name        String
  description String    @db.Text
  competition Competition @relation(fields: [competitionId], references: [id], onDelete: Cascade)
  competitionId String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  stages      Stage[]
}

model Stage {
  id          String    @id @default(cuid())
  name        String
  description String
  category    Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  categoryId  String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

enum StageStatus {
  UPCOMING
  ONGOING
  FINISHED
}

model Teacher {
  id          String    @id @default(cuid())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  schools     TeacherSchool[]
}


model School {
  id          String    @id @default(cuid())
  name        String
  address     String
  om          String    @default("N/A")
  area        String
  teachers    TeacherSchool[]
  students    StudentSchool[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Student {
  id          String    @id @default(cuid())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  schools     StudentSchool[]
}

model TeacherSchool {
  teacherId   String
  schoolId    String
  teacher     Teacher   @relation(fields: [teacherId], references: [id])
  school      School    @relation(fields: [schoolId], references: [id])
  from        DateTime
  to          DateTime?
  @@id([teacherId, schoolId])
}

model StudentSchool {
  studentId   String
  schoolId    String
  student     Student   @relation(fields: [studentId], references: [id])
  school      School    @relation(fields: [schoolId], references: [id])

  from        DateTime
  to          DateTime?

  @@id([studentId, schoolId])
}

model Evaulator {
  id          String    @id @default(cuid())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  User        User      @relation(fields: [userId], references: [id])
  userId      String    @unique

}