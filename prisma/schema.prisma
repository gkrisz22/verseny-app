// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/**
 * ============================
 * ********* AuthJS **********
 * ============================
 */
model User {
  id            String     @id @default(cuid())
  name          String?
  username      String?    @unique
  email         String?    @unique
  emailVerified DateTime?
  password      String?
  image         String?
  superAdmin    Boolean    @default(false)
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  status        UserStatus @default(PENDING)
  files         File[]
  sessions      Session[]

  memberships  OrganizationUser[]
  accounts     Account[]
  verification VerificationToken?
  evaluations  StudentStage[]

  @@unique([email, username])
}

enum UserStatus {
  ACTIVE
  INACTIVE
  PENDING
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  id_token          String?
  session_state     String?
  scope             String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model VerificationToken {
  identifier String   @id @default(cuid())
  token      String
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
}

model OrganizationCompetitionParticipation {
  id             String              @id @default(cuid())
  competitionId  String
  organizationId String
  userId         String
  status         ParticipationStatus @default(PENDING)
  createdAt      DateTime            @default(now())
  updatedAt      DateTime            @updatedAt
  organization   Organization        @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  competition    Competition         @relation(fields: [competitionId], references: [id], onDelete: Cascade)
}

enum ParticipationStatus {
  PENDING
  APPROVED
  REJECTED
}

model Organization {
  id           String             @id @default(cuid())
  name         String
  om           String?
  region       String             @default("Budapest")
  postalCode   String
  city         String
  address      String
  phoneNumber  String?
  contactEmail String?
  contactName  String?
  type         String             @default("SCHOOL")
  status       OrganizationStatus @default(PENDING)
  createdAt    DateTime           @default(now())
  updatedAt    DateTime           @updatedAt

  members        OrganizationUser[]
  participations OrganizationCompetitionParticipation[]
  students       SchoolStudent[]
}

enum OrganizationType {
  SCHOOL
  UNIVERSITY
  INDEPENDENT
}

enum OrganizationStatus {
  ACTIVE
  INACTIVE
  PENDING
  REJECTED
}

// Many-to-Many: Organization - User
model OrganizationUser {
  id             String             @id @default(cuid())
  organizationId String
  userId         String
  roles          OrganizationRole[]
  joinedAt       DateTime           @default(now())
  updatedAt      DateTime           @updatedAt
  organization   Organization       @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  user           User               @relation(fields: [userId], references: [id])

  @@unique([organizationId, userId])
}

// Many-to-Many: Role - OrganizationUser
model OrganizationRole {
  id                 String           @id @default(cuid())
  roleId             String
  assignedAt         DateTime         @default(now())
  updatedAt          DateTime         @updatedAt
  organizationUserId String
  organizationUser   OrganizationUser @relation(fields: [organizationUserId], references: [id], onDelete: Cascade)
  role               Role             @relation(fields: [roleId], references: [id])
}

model Competition {
  id               String            @id @default(cuid())
  title            String
  shortDescription String?
  description      String            @db.Text
  startDate        DateTime
  endDate          DateTime?
  signUpStartDate   DateTime?
  signUpEndDate     DateTime?
  status           CompetitionStatus @default(UPCOMING)
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  published        Boolean           @default(false)

  categories   Category[]
  participants OrganizationCompetitionParticipation[]
}

enum CompetitionStatus {
  UPCOMING
  ONGOING
  FINISHED
}

model Category {
  id             String            @id @default(cuid())
  name           String
  description    String            @db.Text
  competitionId  String
  published      Boolean           @default(false)
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @updatedAt
  eligibleGrades Int[]
  competition    Competition       @relation(fields: [competitionId], references: [id], onDelete: Cascade)
  stages         Stage[]
  students       StudentCategory[]
}

model StudentCategory {
  id         String   @id @default(cuid())
  categoryId String
  studentId  String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  category   Category @relation(fields: [categoryId], references: [id])
  student    Student  @relation(fields: [studentId], references: [id])
}

model Stage {
  id          String      @id @default(cuid())
  name        String
  description String
  status      StageStatus @default(UPCOMING)
  startDate   DateTime
  endDate     DateTime?

  accessStartDate     DateTime?
  evaluationStartDate DateTime?
  evaluationEndDate   DateTime?

  categoryId String
  published  Boolean  @default(false)
  order      Int      @default(0)
  minPoints  Int      @default(0)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  category Category       @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  files    File[]
  tasks    TaskGroup[]
  students StudentStage[]
}

enum StageStatus {
  UPCOMING
  ONGOING
  FINISHED
}

model Student {
  id            String                @id @default(cuid())
  name          String
  uniqueId      String                @unique
  createdAt     DateTime              @default(now())
  updatedAt     DateTime              @updatedAt
  schools       SchoolStudent[]
  categories    StudentCategory[]
  stages        StudentStage[]
  academicYears StudentAcademicYear[]
  grade         Int?
  gradeString   String?
}

model StudentStage {
  id          String             @id @default(cuid())
  studentId   String
  stageId     String
  custom      String?
  totalPoints Int                @default(-1)
  evaluatorId String?
  status      StudentStageStatus @default(NOT_SUBMITTED)
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt
  student     Student            @relation(fields: [studentId], references: [id])
  stage       Stage              @relation(fields: [stageId], references: [id])
  evaluator   User?              @relation(fields: [evaluatorId], references: [id])

  @@unique([studentId, stageId])
  @@index([studentId])
  @@index([stageId])
  @@index([evaluatorId])
}

enum StudentStageStatus {
  NOT_SUBMITTED
  SUBMITTED
  EVALUATED
  RE_EVALUATED
}

model SchoolStudent {
  id        String       @id @default(cuid())
  studentId String
  schoolId  String
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  student   Student      @relation(fields: [studentId], references: [id])
  school    Organization @relation(fields: [schoolId], references: [id])

  @@unique([studentId, schoolId])
}

model File {
  id         String   @id @default(cuid())
  name       String
  fsName     String   @unique
  path       String
  size       Int
  type       String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  user       User     @relation(fields: [uploadedBy], references: [id])
  uploadedBy String

  stage   Stage?  @relation(fields: [stageId], references: [id])
  stageId String?
}

model TaskGroup {
  id        String   @id @default(cuid())
  title     String   @default("Feladatcsoport")
  stageId   String
  tasks     Task[]
  stage     Stage    @relation(fields: [stageId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Task {
  id        String    @id @default(cuid())
  title     String    @default("Feladat")
  type      TaskType  @default(NUMERIC)
  points    Int       @default(0)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  groupId   String
  group     TaskGroup @relation(fields: [groupId], references: [id])

  parentId String?
  parent   Task?   @relation("TaskToTask", fields: [parentId], references: [id])
  subtasks Task[]  @relation("TaskToTask")
}

enum TaskType {
  NUMERIC
  BINARY
  TEXT
}

model Role {
  id          String   @id @default(cuid())
  name        String   @unique
  description String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  permissions Permission[]
  assignments OrganizationRole[]
}

model Permission {
  id          String   @id @default(cuid())
  role        Role     @relation(fields: [roleId], references: [id])
  roleId      String
  resource    String
  action      String
  description String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model AcademicYear {
  id        String   @id @default(cuid())
  name      String
  startDate DateTime
  endDate   DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  students StudentAcademicYear[]
}

model StudentAcademicYear {
  id             String       @id @default(cuid())
  studentId      String
  academicYearId String
  grade          Int
  gradeString    String
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  student        Student      @relation(fields: [studentId], references: [id])
  academicYear   AcademicYear @relation(fields: [academicYearId], references: [id])
}
